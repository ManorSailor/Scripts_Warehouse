#!/bin/bash
#Script to quickly set-up Termux with all of packages etc after re-installation.
#Written by Sars!
#0.3
#
#########################################################
#################### Vars, Helpers ######################
#########################################################
#
#Vars
#i don't want write such a long path again and again.
abs_path=/data/data/com.termux/files
local_etc="$abs_path/usr/local/etc/"
local_bin="$abs_path/usr/local/bin/"
fls_dir="$abs_path/home/Awesome-Termux/Post_Install/post_setup"
post="$abs_path/home/Awesome-Termux/Post_Install/post"
setup_dir="$abs_path/usr/local/etc/post_setup/"
#Ends.

#Check if there is a working internet connection.
chk_con() {
     #Ping google to chechk for internet. Ah yes this command, than
     ping -c 1 google.com &> /dev/null
         if [[ $? -eq 0 ]];
             then
                 success "Internet available"
                return 0
         else
                 spk "$(bl)No Internet! Please connect to Wi-Fi or enable Data $(rst)"
                 #127.0.0.1, so no internet :P
                 err_die "127"
         fi
}

#Helper Functions.
spk() {
	echo -e "\n$1"
}

#Tput-ify
bl() {
	tput bold
}

ul() {
	tput smul
}

rul() {
	tput rmul
}

rst() {
	tput sgr0
}
#Tput-ify Ends.

clr() {
	tput clear
}
#Ends.

#Functions helpful in Debugging.
err_die() {
	spk "Exiting via code $1" #>> /setup/.log
	exit "$1"
}

success() {
	spk "$1 Succeeded!" #>> /setup/.log
}

fail() {
	spk "$1 Failed" #>> /setup/.log
}
#Ends

#########################################################
###################### Main Stuff #######################
#########################################################
#Check for user supplied arguements.
args() {
	while [[ $# -le 2 ]]; do
		case "$1" in
			-m|--minimal)
				_install 'minimal_pack'
				;;
			-d|--default)
				_install 'default_pack'
				;;
			-h|--help)
				usage
				;;
			-u|--user)
				_install 'packages'
				;;
			*)
				spk "$(bl)Unknown flag: $1$(rst)"
				usage
				;;
		esac
	  break
	done
}

_install() {
	cd $setup_dir
		#Read the content line by line.
		while read pkgs; do
			pkg install "$pkgs"
		done < $1
	cd $HOME
}

#First run function to configure stuff.
first_run() {
	mkdir -p $local_bin $local_etc
	cp -r $fls_dir $local_etc
	cp $post $local_bin
	set_path
		sleep 3
		spk "$(bl)All done!$(rst)"
}

#Display the help message.
usage() {
	bl
	echo "$(ul)SYNTAX $(rul)"
	echo "       setup {TYPE}... {FLAG}"

			spk "$(ul)TYPES $(rul)"
			rst
			echo "If no TYPE is defined script will first look for user defined packages list or else it will continue with DEFAULT."
			spk "       -d, --default     Installs the packages which comes predefined                          in packages list."
			spk "       -m, --minimal     Installs the basic packages needed to make                            Termux feel more Linux like."
			spk "       -u, --user        Installs the packages defined by user in the packages list."			
			spk "$(bl) E.g, setup -u or setup --minimal $(rst)"

	spk "$(bl)$(ul)FLAGS $(rul)$(rst)"
			echo "Flags are optional, as of now only SILENT flag is available."
			spk "       -s, --silent      Makes the script run Silently."
			spk "$(bl) E.g., setup -m -s or setup --minimal --silent $(rst)"
} 

#Add /usr/local/bin to $PATH
set_path() {
	local bashrc="$abs_path/usr/etc/bash.bashrc"
	grep -q 'export PATH=$PATH'":$local_bin" $bashrc
		#if last command was UNsuccessful, add the path.
		while [[ $? -eq 1 ]]; do
				echo -e "\nexport PATH=$PATH:$localbin" >> $bashrc
		done
}

#Check if the script is being run for the first time.
if [[ ! -d $setup_dir ]];
	then
		clr
		spk "                                Welcome!\n Just configuring myself. Please bear with me, it can take a while :)"
		chk_con
		first_run
		
elif [[ -d $setup_dir ]];
	then
		chk_con
		args "$1"
fi