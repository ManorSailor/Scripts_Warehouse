#!/bin/bash
#Script to quickly set-up Termux with all of packages etc after re-installation.
#Written by Sars!
#0.4
#
#########################################################
#################### Vars, Helpers ######################
#########################################################
#
#Vars
#i don't want write such a long path again and again.
abs_path=/data/data/com.termux/files
setup_dir="$abs_path/usr/local/etc/post_setup/"
log="$setup_dir.log"
#Ends.

#Check if there is a working internet connection.
chk_con() {
    #Ping google to chechk for internet. Ah yes this command, than
    ping -c 1 google.com &>/dev/null
    if [[ $? -ne 0 ]] ; then
	    echo "Make sure you have a working Internet connection."
		err_die "127"
	fi
}

#Helper Functions.
spk() {
	echo -e "\n$1"
}
#Ends.

#Tput-ify
bl() {
	tput bold
}

ul() {
	tput smul
}

rul() {
	tput rmul
}

rst() {
	tput sgr0
}

clr() {
	tput clear
}

cup() {
	tput cup $1 $2
}

colr() {
	tput setaf $1
}
#Ends.

#Functions helpful in Debugging.
err_die() {
	spk "Exiting via code $1"
	exit "$1"
} >> $log

success() {
	spk "$1 Succeeded!"
} >> $log

fail() {
	spk "$1 Failed"
} >> $log
#Ends

#########################################################
###################### Main Stuff #######################
#########################################################
#Check for user supplied arguements.
args() {
	while [[ $# -le 2 ]]; do
		case "$1" in
			-m|--minimal)
				_install 'minimal_pack'
				;;
			-d|--default)
				_install 'default_pack'
				;;
			-h|--help)
				usage
				;;
			-u|--user)
				_install 'packages'
				;;
			*)
				spk "$(bl)Unknown flag: $1$(rst)"
				usage
				;;
		esac
	  break
	done
}

_install() {
	cd $setup_dir
		#Read the content line by line.
		while read pkgs; do
			pkg install -y "$pkgs"
		done < $1
	cd $HOME
} &>/dev/null

#Get the number of coloumns present on the screen.
#Different styles affects it, so the content may not always be there where it should be.
size() {
local col=$(tput cols)
local sum=$(( $col - 3 ))
}

#right() {
	
#}

#Refresh log file on every startup.
log_chk() {
	if [[ -f $log ]];
	then
		rm $log
	else
		touch $log
	fi
}

#Display the help message.
usage() {
	bl
	echo "$(ul)SYNTAX $(rul)"
	echo "       setup {TYPE}... {FLAG}"

	spk "$(ul)TYPES $(rul)"
			rst
			echo "If no TYPE is defined script will first look for user defined packages list or else it will continue with DEFAULT."
			spk "       -d, --default     Installs the packages which comes predefined                          in packages list."
			spk "       -m, --minimal     Installs the basic packages needed to make                            Termux feel more Linux like."
			spk "       -u, --user        Installs the packages defined by user in the                          packages list."			
			spk "$(bl) E.g, setup -u or setup --minimal $(rst)"

	spk "$(bl)$(ul)FLAGS $(rul)$(rst)"
			echo "Flags are optional, as of now only SILENT flag is available."
			spk "       -s, --silent      Makes the script run Silently."
			spk "$(bl) E.g., setup -m -s or setup --minimal --silent $(rst)"
} 

#Check if the script is being run for the first time.
if [[ ! -d $setup_dir ]];
	then
		clr
		spk "Seems like Something's wrong, Please Re-Install me via install script in the Awesome Termux Directory!"
		exit 1
		
elif [[ -d $setup_dir ]];
	then
		chk_con
		log_chk
		args "$1"
fi