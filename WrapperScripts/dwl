#!/bin/bash
#Simple wrapper/frontend tool for wget/curl.
##################################################
#---------------------NOTES----------------------#
#Dependencies: tput, ncurses-util, curl or wget.
#Frontend tool for hassle free downloading via curl/wget.

#Enable lastpipe option to avoid value loss from vars.
#Hence, in bash the paet of pipes is ran in a subshell. It's value get lost when you that subshell is destroyed.
shopt -s lastpipe

#Script name{{{
readonly _name_="${0}"
#}}}

#Tput-ify{{{
reset=$(tput sgr0) #Reset-ify
bold=$(tput bold) #Bold-ify
cyan=$(tput setaf 6) #Cyan-ify
green=$(tput setaf 2) #Green-ify, no copyright. just no.
red=$(tput setaf 9) #Red-ify
#}}}

#Check presence of needed programs{{{
[[ "$(command -v wget)" || "$(command -v curl)" ]] || { echo "$(bold)$(cyan)This tool requires either curl or wget to be installed.$(reset)"; exit 1; }
[[ "$(command -v file)" ]] || { echo "${bold}file program missing.${reset}"; exit 1; }
#}}}

#Init error/info functions{{{
err_msg() { printf "\n$1"; }
#
err_die() { printf "\n$1"; exit "$2"; }
#
msg() { printf "\n$1"; }
#}}}

#Check Internet{{{
conc() {
	ping -c 1 google.com &>/dev/null
		if [[ $? -ne 0 ]]; then
			echo "Make sure you have a working internet connection."
			err_die "127"
		fi
}
#}}}

#Help msg{{{
hlp() {
cat<<EOF 
${bold}NAME:${reset}
	Simple Wrapper tool for wget/curl.
${bold}USAGE:${reset}
	$_name_ [args] [URL OR File path]
	${bold}dl https://google/joker.jpg -sbBr
${bold}OPTIONS:${reset}
	-b, --background - Makes the script runs in Background.
	-B, --backup - Backsup original copy of downloaded file.
	-r, --replace - Replaces file if it exists.
	-m, --multi - Can handle multiple URLs at a time.
	-f, --file - Provide absolute path to file containing urls.
	-h, --help - Display a msg displaying various commands.
EOF
}
#}}}

#Initialize variables, and stuff{{{
init() {
#Vars{{{
	abs="/data/data/com.termux/files" #Absolute path.
	DDIR="$HOME/Stuff/" #Default download directory.
#}}}

#Arrays{{{
	child_dirs="Archives Docs Music Videos Images Others" #Directories to store specific file types.
#}}}
}
#}}}

#Create proper directories for different file types{{{
mkdirs() {
[[ ! -d $DDIR ]] && mkdir $DDIR; cd "$DDIR" #Create Parent directory
	for childs in ${child_dirs[@]}; do
		[[ ! -d "$childs" ]] && mkdir "$childs"
	done
cd $HOME
}
#}}}

#Parse arguements supplied{{{
args() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-b|--background)
				echo "Background functionality working fine"
				;;
			-B|--backup)
				echo "Backup here"
				;;
			-r|--replace)
				echo "Replace here"
				;;
			-m|--multi)
				echo "Multiple downloader here"
				;;
			-f|--file)
				echo "File here"
				;;
			-h|--help)
				hlp
				;;
			*)
				echo "Needs at least an url or file containing urls. Type $_name_ -h for help"
				;;
		esac
	  break
	done
}
#}}}

#Detect the file-type{{{
detect_filetype() {
[[ -r "$1" ]] || { echo "$1 ${bold}does not exist or incorrect permission${reset}"; exit 1; }
file -b "$1" | grep -Eo '^[^ ]+' | cat | read filetype
	case "$filetype" in
		Bourne-Again)
			echo "Bash file"
			;;
		PNG)
			echo "PNG file"
			;;
		JPEG)
			echo "JPG file"
			;;
		*)
			echo "Dunno"
			;;
	esac
}
#}}}

#Read urls from file{{{
reader() {
[[ -r "$1" ]] || { echo "$1 ${bold}does not exist or incorrect permission${reset}"; exit 1; }
	while read urls; do
		echo "$urls"
	done < "$1"
}
#}}}
init
mkdirs
#conc
args "$1"
detect_filetype "$2"
#reader "$2"
