#! /bin/bash
#Script for Backing-Up and restoring Termux environment.
#Written by Sars!
#0.8

#GLOBAL VARIABLES
#Import the config file containing backup path.
source /data/data/com.termux/files/usr/local/etc/.Backup_Utility/.config

#Choices
chc="Backup Restore List-all Custom-path Remove Quit"
PS3="Choose: "

#######################################
#Wrapper/Helper functions STARTS.
#######################################
ls() {
	command ls -lh "$1" 2>/dev/null
}

rm() {
	command rm -r "$1" "$2" 2>/dev/null
}

mkdir() {
	command mkdir "$1" "$2" 2>/dev/null
}

mv() {
	command mv "$1" "$2" 2>/dev/null
}
######################################
#Wrapper/Helper functions ENDS.
######################################

#Show the menu
#Allow the functions to be called defined below. Hackish way, thanks stackoverflow :P
show_menu() {
	select opt in ${chc[@]}; do
	echo $opt
	break
	done
}

#Check if Directory exists.
chk_dir() {
	if [[ -d "$1" && -n "$1" ]];
		then
			echo -e "\nDirectory Exists!"
			bup_type "$1"

	elif [[ ! -d "$1" && -n "$1" ]];
		then
			mkdir "$1"
			echo -e "\nDirectory Created!!"
			return 1

	else
			echo -e "\nUnknown Input $1"
			exit
	fi
}

#Function to set user defined custom backup paths.
cst_bpt() {
	echo
	read -p "Enter Absolute path for storing Backups: " cbpt
	chk_dir "$cbpt"

	if [[ $? -eq 1 ]]; then
		sed -i "s%cbpt=%cbpt=~/$cbpt%" /data/data/com.termux/files/usr/local/etc/.Backup_Utility/.config #Big thanks to this user, https://serverfault.com/a/857495
		echo -e "\nDefault Backup-Path is now: $cbpt"
	fi
}

#Read the config file & call functions accordingly.
read_cfg() {
	if [[ -z "$cbpt" && "$1" == 'Backup' ]];
 		then
        	bup_type "$dbpt"

	elif [[ -z "$cbpt" && "$1" == 'Restore' ]];
    	then
        	tar_rest "$dbpt"

	elif [[ -n "$cbpt" && "$1" == 'Backup' ]];
    	then
        	bup_type "$cbpt"

 	elif [[ -n "$cbpt" && "$1" == 'Restore' ]];
    	then
        	tar_rest "$cbpt"

    elif [[ -z "$cbpt" && "$1" == 'List-all' ]];
    	then
    		ls "$dbpt"

    elif [[ -n "$cbpt" && "$1" == 'List-all' ]];
    	then
    		ls "$cbpt"

    elif [[ -z "$cbpt" && "$1" == 'Remove' ]];
    	then
    		rm_file "$dbpt"

    elif [[ -n "$cbpt" && "$1" == 'Remove' ]];
    	then
    		rm_file "$cbpt"
    fi
}

#Check if file exists.
chk_file() {
 	if [[ -f "$1" ]];
 	    then
 	        return 0
 	        
	elif [[ -z "$1" ]];
		then
			echo -e "\nPlease Enter Filename!"
			exit

 	else
  	        echo -e "\n$flnm File not found!"
            exit
	fi
}

#Function for removing Backup files.
rm_file() {
	cd "$1"
	echo -e "\nHere is the list of all your Backups:"
	ls "$1"
	echo
	
	read -p "Enter Filename: " flnm
	chk_file "$flnm"
	echo
	read -p "Are you sure you want to remove $flnm?: " ans

	if [[ "$ans" == "Yes" || "$ans" == "Y" || "$ans" == "y" || "$ans" == "yes" ]];
		then
			rm "$flnm"
			echo -e "\nRemoved!"
			return 0

	elif [[ -z "$ans" ]];
		then
			echo -e "\nEmpty string! Aborting..."
			exit

	else
		echo -e "\nAborting.."
		exit
	fi		
}

<<<<<<< HEAD
#Choose Backup-Type.
bup_type() {
	echo -e "\nFull Backup: Backs-Up Both entire root directory"
=======
#Fucntion to set backup file name.
st_nm() {
	read -p "Enter the Name for backup file: " nm

	if [[ -n "$nm" ]];
		then
			echo -e "\nName has been set!"
	else
			echo -e "\nUsing default name for backup file"
			nm="$1"
	fi
}

#Choose Backup-Type.
bup_type() {
	echo -e "\nFull Backup: Backs-Up entire root directory"
>>>>>>> 69be0a75517f762875bd54b7069cbc61a26af0dd
	echo -e "\nHalf Backup: Backs-Up /usr/etc & /home only."
	echo	
	read -p "Full or Half: " ans

	if [[ "$ans" == "Full" && ! -z "$ans" ]];
		then
			echo -e "\nInitiating Full Backup..."
<<<<<<< HEAD
			tar_bup "$1" "$fbup" "root_$(date --i)"
=======
			st_nm "root"
			tar_bup "$1" "$fbup"
>>>>>>> 69be0a75517f762875bd54b7069cbc61a26af0dd

	elif [[ "$ans" == "Half" && ! -z "$ans" ]];
		then
			echo -e "\nInitiating Half Backup..."
<<<<<<< HEAD
			tar_bup "$1" "$hbup" "usr_$(date --i)"
=======
			st_nm "usr"
			tar_bup "$1" "$hbup"
>>>>>>> 69be0a75517f762875bd54b7069cbc61a26af0dd

	else
			show_menu
	fi
}

#Function for Backing-Up.
tar_bup() {
	mkdir -p "$1"
<<<<<<< HEAD
#	st_nm
	tar -czpf "$3" $2 2>/dev/null
	mv "$3" "$1"
=======
	tar -czpf "$nm" $2 2>/dev/null
	mv "$nm" "$1"
>>>>>>> 69be0a75517f762875bd54b7069cbc61a26af0dd
	echo -e "Configs Backed-Up at \n$1"
}

#Fix tar cannot create symlink error, cause android's storage filesystem format doesnt support moving/copying symlinks
fix_rest() {
	cd "$1"
	cp "$2" "$HOME" 
	cd "$HOME"
} 2>/dev/null

#Funtcion for Restoring.
tar_rest() {
	echo -e "\nHere is the list of all your Backups:"
	ls "$1"
	echo
	read -p "Enter File Name: " flnm
	fix_rest "$1" "$flnm"
	chk_file "$flnm"
	tar -xzpf "$flnm" -C ../ 2>/dev/null
	rm "$flnm"
}

#Iterate over the menu everytime
while true; do
COLUMNS=5
opt=$(show_menu)

case $opt in
	"Quit")
		break
		;;

	"Backup")
		echo -e "\nCreating Backup....."
		read_cfg 'Backup'
 		echo
 		;;

	"Restore")
		echo -e "\nRestoring Backup..."
		read_cfg 'Restore'
		echo -e "\nConfigs Restored!"
		echo
        ;;
            
	"List-all")
		echo "Here is the list of all your Backups:"
		echo
		read_cfg 'List-all'
		echo
		;;

	"Remove")
		read_cfg 'Remove'
		echo
		;;

	"Custom-path")
		cst_bpt
		echo
		;;
            
	*) 
		echo invalid option
		echo
		;;
	esac
done